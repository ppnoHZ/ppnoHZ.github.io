{"pages":[],"posts":[{"title":"flex","text":"基本概念简便、完整、响应式地实现各种页面布局。使用flex布局的元素被称为flex container，其子元素称为flex item。 主轴（main axis）主轴的方向由flex-direction决定，主轴开始的位置叫 main start，结束位置叫 main end。单个 item 占main axis的空间叫 main size。 交叉轴（cross axis）交叉轴是垂直于主轴的，也会根据flex-direction的设置不同而变化。交叉轴开始位置叫 cross start，结束位置叫 cross end。单个 item 占 cross axis的空间叫做 cross size。 图解 Flex容器属性display : flex flex元素1 flex元素2 flex元素3 比较高的元素 会撑开整个容器 其他元素也会在交叉轴上进行拉伸 .box .item{ border: 1px solid red; } .box{ display:flex; } flex的默认行为设置属性为flex之后，容器中都所有子元素都会变成flex元素，并会具有下列默认行为： 默认方向：row，排列为一行 默认从左往右，从主轴的起始线开始 默认不换行显示（如果flex元素超出容器会溢出） 默认所有flex元素不会在主轴方向拉伸，但是可以缩小（保持大小） 所有flex元素被拉伸来填充交叉轴\b大小（如果有元素比其他元素高，那么其他元素会沿着交叉轴被拉伸，来填满它的大小） html123456789&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;item&quot;&gt;flex元素1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;flex元素2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;flex元素3 &lt;br&gt;比较高的元素 &lt;br&gt;会撑开整个容器 &lt;br&gt;其他元素也会在交叉轴上进行拉伸 &lt;/div&gt;&lt;/div&gt;css123456.box .item{ border: 1px solid red;}.box{ display:flex;} flex-direction : 主轴的排列方向，默认为 row； row:所有子元素在交叉轴（垂直方向）拉伸 1 2 3 3 3 row-reverse 1 2 3 column; 主轴为垂直方向，交叉轴为水平方向 1 2 3 column-reverse 1 2 3 .flex-contianer{ display:flex; width:400px; border : 2px solid black; } .flex-item{ border:1px solid red; border-radius:2px; } .flex-direction-row-reverse{ flex-direction : row-reverse; } .flex-direction-column{ flex-direction : column; } .flex-direction-column-reverse{ flex-direction : column-reverse; } 主轴的排列方向html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;span&gt;row:所有子元素在交叉轴（垂直方向）拉伸&lt;/span&gt;&lt;div class=&quot;flex-contianer&quot;&gt; &lt;div class=&quot;flex-item&quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;span&gt;row-reverse&lt;/span&gt;&lt;div class=&quot;flex-contianer flex-direction-row-reverse&quot;&gt; &lt;div class=&quot;flex-item&quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 3 &lt;/div&gt;&lt;/div&gt;&lt;span&gt; column; 主轴为垂直方向，交叉轴为水平方向&lt;/span&gt;&lt;div class=&quot;flex-contianer flex-direction-column&quot;&gt; &lt;div class=&quot;flex-item&quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 3 &lt;/div&gt;&lt;/div&gt;&lt;span&gt;column-reverse&lt;/span&gt;&lt;div class=&quot;flex-contianer flex-direction-column-reverse&quot;&gt; &lt;div class=&quot;flex-item&quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 3 &lt;/div&gt;&lt;/div&gt;css12345678910111213141516171819.flex-contianer{ display:flex; width:400px; border : 2px solid black;}.flex-item{ border:1px solid red; border-radius:2px;}.flex-direction-row-reverse{ flex-direction : row-reverse;}.flex-direction-column{ flex-direction : column;}.flex-direction-column-reverse{ flex-direction : column-reverse;} flex-wrap: nowrap | wrap | wrap-reverse nowrap:默认不换行，如果子元素总宽度大于容器，则会安比例缩小。实际的宽要小于设置的宽 1 2 3 3 3 wrap:保留子元素的自己的宽，超出容器自动换行 1 2 3 3 3 wrap-reverse:倒序换行显示 1 2 3 3 3 .flex-contianer{ display:flex; margin-bottom:20px; } .flex-nowrap { width : 500px; } .flex-wrap { width : 500px; flex-wrap: wrap; } .flex-wrap-reverse{ width:500px; flex-wrap:wrap-reverse; } .flex-nowrap .flex-item, .flex-wrap .flex-item, .flex-wrap-reverse .flex-item { width: 200px; } 是否换行 flex-wrap:nowrap; /默认值，不换行/ flex-wrap:wrap; /当显示不下，进行换行/ flex-wrap:wrap-reverse; /当显示不下，倒序换行显示/ html123456789101112131415161718192021222324252627282930313233343536373839404142&lt;span&gt;nowrap:默认不换行，如果子元素总宽度大于容器，则会安比例缩小。实际的宽要小于设置的宽&lt;/span&gt; &lt;div class=&quot;flex-contianer flex-nowrap&quot;&gt; &lt;div class=&quot;flex-item &quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;span&gt;wrap:保留子元素的自己的宽，超出容器自动换行&lt;/span&gt;&lt;div class=&quot;flex-contianer flex-wrap&quot;&gt; &lt;div class=&quot;flex-item &quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;span&gt;wrap-reverse:倒序换行显示&lt;/span&gt;&lt;div class=&quot;flex-contianer flex-wrap-reverse&quot;&gt; &lt;div class=&quot;flex-item &quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;css1234567891011121314151617181920.flex-contianer{ display:flex; margin-bottom:20px;}.flex-nowrap { width : 500px;}.flex-wrap { width : 500px; flex-wrap: wrap;}.flex-wrap-reverse{ width:500px; flex-wrap:wrap-reverse;}.flex-nowrap .flex-item,.flex-wrap .flex-item,.flex-wrap-reverse .flex-item { width: 200px;} flex-flow flex-direction 和 flex-wrap 的简写。 1 2 3 3 3 .flex-contianer.flex-flow{ width:500px; } .flex-flow{ flex-flow:row wrap; /**简写**/ } .flex-flow .flex-item{ width:200px; } flex-flow简写flex-flow: [flex-direction] || [flex-wrap]; html12345678910111213&lt;div class=&quot;flex-contianer flex-flow&quot;&gt; &lt;div class=&quot;flex-item &quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot;&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;3&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;css123456789.flex-contianer.flex-flow{ width:500px;}.flex-flow{ flex-flow:row wrap; /**简写**/}.flex-flow .flex-item{ width:200px;} justify-content 主轴的对齐方式123.contianer { justify-content: flex-start | flex-end | center | space-between | space-around; } align-items 交叉轴的对齐方式align-contentitem 属性 布局空白 假设在 1 个 500px的容器中，我们有3个100px 宽的元素，那么这3个元素需要占 300px 的宽，剩下 200px 的布局空白.在默认情况下， flexbox 的行为会把这 200px 的空白留在最后一个元素的后面。我们可通过flex属性去设置，让flex元素自动扩展去填满剩下的空白。 flex-basis 定义该元素的布局空白的基准值，默认auto。如果该元素有设置固定尺寸（如：100px)，那么flex-basis的值就是100px。 元素在主轴上增长html12&lt;div&gt;&lt;/div&gt;css1 flex-grow 1 2 3 1 2 3flexbasis:70px 元素在主轴上增长这个flex子元素得到（伸张）多少空余空间。以flex-basis为基础，沿主轴方向增加尺寸来占据布局空白。如果其他元素也设置来，则会按照比例占据布局空白。 html12345678910111213141516171819202122&lt;div class=&quot;flex-contianer&quot;&gt; &lt;div class=&quot;flex-item&quot; style=&quot;flex: 1&quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot; style=&quot;flex: 2&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot; style=&quot;flex: 1&quot;&gt; 3 &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;flex-contianer&quot; style=&quot;width:500px&quot;&gt; &lt;div class=&quot;flex-item&quot; style=&quot;flex-grow: 1;width:50px&quot;&gt; 1 &lt;/div&gt; &lt;div class=&quot;flex-item&quot; style=&quot;flex-grow: 2;width:100px&quot;&gt; 2 &lt;/div&gt; &lt;div class=&quot;flex-item&quot; style=&quot;flex: 0 0 80px&quot;&gt; 3flexbasis:70px &lt;/div&gt;&lt;/div&gt;css1 flex-shrink 元素在主轴上的收缩处理flex元素收缩的问题，如果容易没显示不下所有的元素，可通过设置该属性来让元素缩小自身所占的空间到flex-basis以下。只有在所有元素超出主轴才会生效。 html12&lt;div&gt;&lt;/div&gt;css1 使用方法12345.contianer { /* 兼容 Safari */ display:-webkit-flex; display:flex;} ###","link":"/2019/05/19/flex/"}],"tags":[{"name":"CSS","slug":"CSS","link":"/tags/CSS/"}],"categories":[]}